import PosLayout from "@/components/layouts/pos-layout";
import { Breadcrumbs } from "@/components/common/breadcrumbs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import useProduct from "@/hooks/use-product";
import { SimplifiedProduct } from "@/types/simplified-products";
import { useEffect, useState, useRef, useMemo, useCallback } from "react";
import { formatRupiah } from "@/lib/formatter";
import { 
  FaSearch, 
  FaShoppingCart, 
  FaUser, 
  FaUserPlus, 
  FaCreditCard, 
  FaBarcode, 
  FaPlus, 
  FaMinus, 
  FaTrash, 
  FaTimes, 
  FaSignOutAlt, 
  FaFilter, 
  FaCashRegister, 
  FaUsers, 
  FaPercentage, 
  FaBoxOpen, 
  FaStore, 
  FaChevronLeft, 
  FaChevronRight, 
  FaCheck, 
  FaReceipt, 
  FaInfoCircle, 
  FaMapMarkerAlt, 
  FaWarehouse, 
  FaArrowLeft, 
  FaTag, 
  FaClock, 
  FaCalendar, 
  FaMoneyCheck, 
  FaChevronDown, 
  FaWhatsapp, 
  FaPrint, 
  FaDownload, 
  FaExclamationTriangle 
} from 'react-icons/fa';
import Link from "next/link";
import Image from 'next/image';
import PromoSelection from "@/components/pos/promo-selection";
import PaymentModal from "@/components/pos/payment-modal";
import KasirLayout from "@/components/layouts/kasir-layout";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import BackButton from "@/components/common/back-button";
import { useToast } from "@/components/ui/use-toast";

// Product card component with enhanced decorative design and location info
const ProductCard = ({ product, onAddToCart, onViewDetail }: { product: SimplifiedProduct; onAddToCart: () => void; onViewDetail: () => void }) => (
  <div className="relative group overflow-hidden bg-white rounded-xl shadow-md hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02] border border-orange-100">
    {/* Decorative elements */}
    <div className="absolute -right-6 -top-6 w-16 h-16 bg-gradient-to-br from-orange-300 to-orange-100 rounded-full opacity-30"></div>
    <div className="absolute -left-6 -bottom-6 w-12 h-12 bg-gradient-to-tr from-orange-300 to-orange-100 rounded-full opacity-30"></div>
    <div className="absolute right-0 top-1/2 w-2 h-20 bg-gradient-to-b from-orange-400 to-orange-100 rounded-l-lg opacity-40 transform -translate-y-1/2"></div>
    
    {/* Product image with gradient overlay */}
    <div className="relative h-40 overflow-hidden rounded-t-xl">
      <div className="absolute inset-0 bg-gradient-to-t from-black/30 to-transparent z-10"></div>
      <Image
        src={product.image}
        alt={product.name}
        fill
        className="object-cover transition-transform duration-500 group-hover:scale-110"
        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
      />
      <div className="absolute top-2 right-2 z-20">
        <div className="bg-orange-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg">
          {product.category}
        </div>
      </div>
      
      {/* Location badge */}
      <div className="absolute bottom-2 left-2 z-20">
        <div className="bg-white/80 backdrop-blur-sm text-xs font-medium px-2 py-1 rounded-full shadow-sm flex items-center">
          <FaMapMarkerAlt className="mr-1 text-orange-500" size={10} />
          {product.location || 'Etalase Utama'}
        </div>
      </div>
    </div>
    
    {/* Product details with decorative elements */}
    <div className="p-4 relative">
      <h3 className="font-semibold text-gray-800 mb-1 truncate">{product.name}</h3>
      <div className="flex justify-between items-center mb-3">
        <p className="text-orange-600 font-bold">{formatRupiah(product.price)}</p>
        <p className="text-xs text-gray-500">Stok: {product.stock}</p>
      </div>
      
      {/* Action buttons */}
      <div className="flex space-x-2">
        <button
          onClick={onAddToCart}
          className="flex-1 py-1.5 bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-lg text-sm hover:from-orange-600 hover:to-orange-700 transition-colors flex items-center justify-center shadow-sm"
        >
          <FaPlus size={12} className="mr-1" /> Keranjang
        </button>
        <button
          onClick={onViewDetail}
          className="p-1.5 bg-orange-50 text-orange-600 rounded-lg hover:bg-orange-100 transition-colors flex items-center justify-center shadow-sm"
        >
          <FaInfoCircle size={14} />
        </button>
      </div>
    </div>
  </div>
);

// Cart item component with enhanced styling
const CartItem = ({ 
  item, 
  onIncrement, 
  onDecrement, 
  onRemove 
}: { 
  item: { product: SimplifiedProduct; quantity: number }; 
  onIncrement: () => void; 
  onDecrement: () => void; 
  onRemove: () => void;
}) => (
  <div className="bg-white p-3 rounded-xl mb-3 shadow-sm border border-orange-100 hover:shadow-md transition-all duration-300 relative overflow-hidden">
    {/* Decorative elements */}
    <div className="absolute -right-4 -bottom-4 w-12 h-12 bg-orange-100 rounded-full opacity-30"></div>
    
    <div className="flex items-center">
      <div className="relative w-16 h-16 rounded-lg overflow-hidden mr-3 border-2 border-orange-100">
        <Image
          src={item.product.image}
          alt={item.product.name}
          fill
          className="object-cover"
          sizes="64px"
        />
      </div>
      <div className="flex-1">
        <h4 className="font-medium text-gray-800 text-sm">{item.product.name}</h4>
        <p className="text-orange-600 font-bold text-sm">{formatRupiah(item.product.price)}</p>
        <div className="flex items-center justify-between mt-2">
          <div className="flex items-center bg-orange-50 rounded-lg overflow-hidden border border-orange-200">
            <button 
              onClick={onDecrement}
              className="px-2 py-1 text-orange-600 hover:bg-orange-100 transition-colors"
              disabled={item.quantity <= 1}
            >
              <FaMinus size={10} />
            </button>
            <span className="px-3 py-1 text-sm font-medium text-gray-800 bg-white border-x border-orange-200">
              {item.quantity}
            </span>
            <button 
              onClick={onIncrement}
              className="px-2 py-1 text-orange-600 hover:bg-orange-100 transition-colors"
            >
              <FaPlus size={10} />
            </button>
          </div>
          <button 
            onClick={onRemove}
            className="p-1.5 text-red-500 hover:bg-red-50 rounded-full transition-colors"
          >
            <FaTrash size={14} />
          </button>
        </div>
      </div>
    </div>
  </div>
);

const KasirPage = () => {
  const { productTotalPage, isLoading, getProductByCurrentPage } = useProduct();
  const [currentPage, setCurrentPage] = useState(1);
  const [products, setProducts] = useState<SimplifiedProduct[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [cart, setCart] = useState<{ product: SimplifiedProduct; quantity: number }[]>([]);
  const [scrollPosition, setScrollPosition] = useState(0);
  const carouselRef = useRef<HTMLDivElement>(null);
  
  // Promo state
  const [selectedPromo, setSelectedPromo] = useState<any | null>(null);
  
  // Payment modal state
  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
  
  // New customer modal state
  const [isNewCustomerModalOpen, setIsNewCustomerModalOpen] = useState(false);
  const [newCustomer, setNewCustomer] = useState({
    name: '',
    phone: '',
    email: ''
  });
  
  // Transaction success modal state
  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);
  const [transactionData, setTransactionData] = useState<any>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  
  // Filter state
  const [categoryFilter, setCategoryFilter] = useState<string | null>(null);
  const categories = ["Semua", "Makanan", "Minuman", "Obat", "Vitamin", "Skincare", "Lainnya"];
  
  // Product detail modal state
  const [selectedProductDetail, setSelectedProductDetail] = useState<SimplifiedProduct | null>(null);
  
  // Dummy products data with improved images and location information
  const dummyProducts = useMemo(() => [
    {
      id: "1",
      name: "Paracetamol 500mg",
      price: 10000,
      category: "Obat",
      image: "https://images.unsplash.com/photo-1584308666744-24d5c474f2ae?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 100,
      description: 'Obat pereda nyeri dan demam dengan kandungan paracetamol 500mg per tablet. Dapat digunakan untuk meredakan sakit kepala, nyeri otot, dan demam.',
      location: 'Rak Obat A-12',
      warehouse: 'Gudang Utama'
    },
    {
      id: "2",
      name: "Vitamin C 1000mg",
      price: 25000,
      category: "Vitamin",
      image: "https://images.unsplash.com/photo-1584362096795-0eeddc8c6313?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 50,
      description: 'Suplemen vitamin C dosis tinggi untuk meningkatkan daya tahan tubuh. Membantu menjaga kesehatan sistem imun dan melindungi sel dari kerusakan radikal bebas.',
      location: 'Rak Vitamin B-3',
      warehouse: 'Gudang Utama'
    },
    {
      id: "3",
      name: "Minyak Kayu Putih 60ml",
      price: 15000,
      category: "Obat",
      image: "https://images.unsplash.com/photo-1608571423902-eed4a5ad8108?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 75,
      description: 'Minyak kayu putih untuk meredakan gejala masuk angin, perut kembung, dan gatal akibat gigitan serangga. Memberikan sensasi hangat pada kulit.',
      location: 'Etalase Depan',
      warehouse: 'Gudang Cabang'
    },
    {
      id: "4",
      name: "Masker Medis (50 pcs)",
      price: 50000,
      category: "Lainnya",
      image: "https://images.unsplash.com/photo-1605845753398-4f0fa8a7e364?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 30,
      description: 'Masker medis dengan 3 lapisan pelindung untuk mencegah penyebaran virus dan bakteri. Cocok digunakan di tempat umum.',
      location: 'Rak Masker A-5',
      warehouse: 'Gudang Utama'
    },
    {
      id: "5",
      name: "Hand Sanitizer 100ml",
      price: 20000,
      category: "Lainnya",
      image: "https://images.unsplash.com/photo-1584483720412-e4307cf6283a?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 45,
      description: 'Pembersih tangan tanpa air yang mengandung alkohol 70% untuk membunuh kuman dan bakteri.',
      location: 'Rak Pembersih Tangan B-2',
      warehouse: 'Gudang Cabang'
    },
    {
      id: "6",
      name: "Betadine 60ml",
      price: 18000,
      category: "Obat",
      image: "https://images.unsplash.com/photo-1587854692152-cbe660dbde88?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 60,
      description: 'Obat luka yang mengandung povidon iodin untuk membantu proses penyembuhan luka.',
      location: 'Rak Obat A-10',
      warehouse: 'Gudang Utama'
    },
    {
      id: "7",
      name: "Facial Wash Acne Care",
      price: 35000,
      category: "Skincare",
      image: "https://images.unsplash.com/photo-1556760544-74068565f05c?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 25,
      description: 'Sabun pembersih wajah yang diformulasikan khusus untuk kulit berjerawat.',
      location: 'Rak Skincare C-1',
      warehouse: 'Gudang Cabang'
    },
    {
      id: "8",
      name: "Susu Diabetasol 180gr",
      price: 68000,
      category: "Makanan",
      image: "https://images.unsplash.com/photo-1550583724-b2692b85b150?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 20,
      description: 'Susu bubuk yang diformulasikan khusus untuk penderita diabetes.',
      location: 'Rak Makanan A-7',
      warehouse: 'Gudang Utama'
    },
    {
      id: "9",
      name: "Teh Herbal Detox",
      price: 45000,
      category: "Minuman",
      image: "https://images.unsplash.com/photo-1564890369478-c89ca6d5c232?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 15,
      description: 'Teh herbal yang diformulasikan khusus untuk membantu proses detoksifikasi tubuh.',
      location: 'Rak Minuman B-1',
      warehouse: 'Gudang Cabang'
    },
    {
      id: "10",
      name: "Sunscreen SPF 50",
      price: 85000,
      category: "Skincare",
      image: "https://images.unsplash.com/photo-1556227702-d1e4e7b5c232?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 30,
      description: 'Tabir surya yang mengandung SPF 50 untuk melindungi kulit dari sinar UV.',
      location: 'Rak Skincare C-2',
      warehouse: 'Gudang Utama'
    },
    {
      id: "11",
      name: "Madu Murni 250ml",
      price: 55000,
      category: "Makanan",
      image: "https://images.unsplash.com/photo-1587049352851-8d4e89133924?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 40,
      description: 'Madu murni yang diambil langsung dari sarang lebah.',
      location: 'Rak Makanan A-8',
      warehouse: 'Gudang Cabang'
    },
    {
      id: "12",
      name: "Minuman Isotonik",
      price: 8000,
      category: "Minuman",
      image: "https://images.unsplash.com/photo-1581006852262-e4307cf6283a?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80",
      stock: 100,
      description: 'Minuman isotonik yang diformulasikan khusus untuk atlet.',
      location: 'Rak Minuman B-2',
      warehouse: 'Gudang Utama'
    },
  ], []);
  
  // Load products on page load
  useEffect(() => {
    setProducts(dummyProducts);
  }, [dummyProducts]);
  
  // Filter products based on search term and category
  const filteredProducts = useMemo(() => {
    return products.filter(product => {
      const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = categoryFilter === "Semua" || categoryFilter === null || product.category === categoryFilter;
      return matchesSearch && matchesCategory;
    });
  }, [products, searchTerm, categoryFilter]);
  
  const { toast } = useToast();
  
  // Add product to cart
  const handleAddToCart = (product: SimplifiedProduct) => {
    const existingCartItemIndex = cart.findIndex(item => item.product.id === product.id);
    
    if (existingCartItemIndex !== -1) {
      if (cart[existingCartItemIndex].quantity >= product.stock) {
        toast('Stok produk tidak mencukupi!');
        return;
      }
      
      const updatedCart = [...cart];
      updatedCart[existingCartItemIndex].quantity += 1;
      setCart(updatedCart);
    } else {
      setCart([...cart, { product, quantity: 1 }]);
    }
    
    toast(`${product.name} telah ditambahkan ke keranjang`);
  };
  
  // Handle removing item from cart by index
  const handleRemoveCartItem = (index: number) => {
    const updatedCart = [...cart];
    updatedCart.splice(index, 1);
    setCart(updatedCart);
  };

  // Calculate promo discount
  const calculatePromoDiscount = (promo: any, subtotal: number) => {
    if (promo.type === 'percentage') {
      const discount = subtotal * (promo.value / 100);
      return Math.min(discount, promo.maxDiscount);
    } else if (promo.type === 'fixed') {
      return promo.value;
    }
    return 0;
  };

  // Calculate cart total
  const subtotal = cart.reduce((total, item) => total + (item.product.price * item.quantity), 0);
  
  // Calculate promo discount
  const discount = selectedPromo ? calculatePromoDiscount(selectedPromo, subtotal) : 0;
  
  // Calculate total after discount
  const total = subtotal - discount;
  
  // Calculate tax (10%)
  const tax = (subtotal - discount) * 0.1;
  
  // Calculate grand total
  const grandTotal = total + tax;
  
  // Handle payment button click
  const handlePayment = () => {
    if (cart.length === 0) {
      toast('Silakan tambahkan produk ke keranjang terlebih dahulu');
      return;
    }
    
    setIsPaymentModalOpen(true);
  };

  // Handle payment completion
  const handlePaymentComplete = (paymentData: any) => {
    setIsPaymentModalOpen(false);
    setIsProcessing(true);
    
    setTimeout(() => {
      setIsProcessing(false);
      
      const transaction = {
        id: `TRX-${Date.now().toString()}`,
        date: new Date().toISOString(),
        cashier: currentCashier.name,
        customer: selectedCustomer.name,
        items: cart,
        subtotal: calculateSubtotal(),
        discount: calculateDiscount(),
        total: calculateTotal(),
        paymentMethod: paymentData.method,
        amountPaid: paymentData.amount,
        change: paymentData.amount - calculateTotal()
      };
      
      setTransactionData(transaction);
      setIsSuccessModalOpen(true);
      
      setCurrentCashier(prev => ({
        ...prev,
        totalTransactions: prev.totalTransactions + 1,
        totalAmount: prev.totalAmount + calculateTotal()
      }));
      
      setCart([]);
      setSelectedPromo(null);
    }, 1500);
  };
  
  // Handle new customer
  const handleNewCustomer = () => {
    if (!newCustomer.name || !newCustomer.phone) {
      toast('Nama dan nomor telepon wajib diisi!');
      return;
    }

    // In a real app, you would save this to your backend
    // For now, we'll just update the selected customer
    setSelectedCustomer({
      id: Date.now(), // Use a number for the ID
      name: newCustomer.name,
      phone: newCustomer.phone,
      email: newCustomer.email || '',
      address: '',
      points: 0
    });

    // Reset form and close modal
    setNewCustomer({ name: '', phone: '', email: '' });
    setIsNewCustomerModalOpen(false);
    toast('Pelanggan baru berhasil ditambahkan!');
  };
  
  // State for customer selection
  const [customers] = useState([
    { id: 1, name: 'Walk-in Customer', phone: '-', email: '-', address: '-', points: 0 },
    { id: 2, name: 'John Doe', phone: '081234567890', email: 'john@example.com', address: 'Jl. Sudirman No. 123', points: 150 },
    { id: 3, name: 'Jane Smith', phone: '089876543210', email: 'jane@example.com', address: 'Jl. Thamrin No. 456', points: 75 }
  ]);
  const [selectedCustomer, setSelectedCustomer] = useState(customers[0]);
  const [isCustomerModalOpenState, setIsCustomerModalOpenState] = useState(false);
  
  // State for promo/voucher
  const [isPromoModalOpenState, setIsPromoModalOpenState] = useState(false);

  // Handle view product detail
  const handleViewProductDetail = (product: SimplifiedProduct) => {
    console.log('View product detail:', product);
  };

  const [currentCashier, setCurrentCashier] = useState({
    name: "John Doe",
    id: "CSR-001",
    shift: "Pagi",
    avatar: "/images/avatar-placeholder.png",
    shiftStart: "08:00",
    shiftEnd: "16:00",
    totalTransactions: 12,
    totalAmount: 1250000
  });
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isStaffDropdownOpen, setIsStaffDropdownOpen] = useState(false);
  const [isEndShiftModalOpen, setIsEndShiftModalOpen] = useState(false);
  const [cashOnHand, setCashOnHand] = useState("");
  const [isConfirmed, setIsConfirmed] = useState(false);

  // Update current time every minute
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);
    
    return () => clearInterval(timer);
  }, []);

  const formattedTime = useMemo(() => {
    return new Intl.DateTimeFormat('id-ID', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(currentTime);
  }, [currentTime]);

  // Check if current time is past shift end time
  const isShiftEndTime = useMemo(() => {
    const now = new Date();
    const [hours, minutes] = currentCashier.shiftEnd.split(':').map(Number);
    const shiftEndTime = new Date();
    shiftEndTime.setHours(hours, minutes, 0, 0);
    
    return now >= shiftEndTime;
  }, [currentTime, currentCashier.shiftEnd]);

  // Handle staff dropdown toggle
  const toggleStaffDropdown = useCallback(() => {
    setIsStaffDropdownOpen(!isStaffDropdownOpen);
  }, [isStaffDropdownOpen]);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      if (isStaffDropdownOpen && !target.closest('.staff-dropdown-container')) {
        setIsStaffDropdownOpen(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isStaffDropdownOpen]);

  // Handle end shift button click
  const handleEndShiftClick = () => {
    setIsEndShiftModalOpen(true);
  };
  
  // Handle logout button click
  const handleLogoutClick = () => {
    console.log("Logout clicked");
  };
  
  // State for staff handover in end shift modal
  const [staffHandover, setStaffHandover] = useState("");
  const [availableStaff] = useState([
    { id: "STF-002", name: "Jane Smith" },
    { id: "STF-003", name: "Michael Johnson" },
    { id: "STF-004", name: "Sarah Williams" }
  ]);
  
  // State for receipt generation
  const [isReceiptModalOpen, setIsReceiptModalOpen] = useState(false);
  const [receiptData, setReceiptData] = useState<any>(null);
  const [receiptFormat, setReceiptFormat] = useState<'pdf'|'whatsapp'|null>(null);
  const [customerPhone, setCustomerPhone] = useState("");
  
  // Generate PDF receipt
  const generatePdfReceipt = () => {
    console.log('Generating PDF receipt for transaction:', transactionData);
    toast('Struk berhasil dibuat');
    setTimeout(() => {
      setReceiptFormat(null);
      setIsReceiptModalOpen(false);
    }, 1500);
  };
  
  // Send receipt via WhatsApp
  const sendWhatsAppReceipt = () => {
    if (!customerPhone) {
      toast('Masukkan nomor WhatsApp yang valid');
      return;
    }
    
    console.log('Sending WhatsApp receipt to:', customerPhone);
    toast(`Struk dikirim ke WhatsApp ${customerPhone}`);
    
    setTimeout(() => {
      setReceiptFormat(null);
      setCustomerPhone("");
      setIsReceiptModalOpen(false);
    }, 1500);
  };
  
  // Handle transaction success and show receipt options
  const handleTransactionSuccess = (data: any) => {
    setTransactionData(data);
    setIsSuccessModalOpen(true);
    
    setTimeout(() => {
      setIsSuccessModalOpen(false);
      setReceiptData(data);
      setIsReceiptModalOpen(true);
    }, 2000);
  };
  
  // Handle end shift submission
  const handleEndShift = () => {
    if (!cashOnHand) {
      toast('Masukkan jumlah cash di tangan');
      return;
    }
    
    if (!staffHandover) {
      toast('Pilih staff yang menerima serah terima');
      return;
    }
    
    setIsProcessing(true);
    
    setTimeout(() => {
      setIsProcessing(false);
      
      setTimeout(() => {
        setIsEndShiftModalOpen(false);
        setIsConfirmed(false);
        setCashOnHand("");
        setStaffHandover("");
        
        toast('Shift berhasil ditutup');
      }, 2000);
    }, 1500);
  };

  // Handle cart item quantity increment
  const handleIncrementQuantity = (index: number) => {
    const item = cart[index];
    
    if (item.quantity >= item.product.stock) {
      toast('Stok produk tidak mencukupi!');
      return;
    }
    
    const updatedCart = [...cart];
    updatedCart[index] = {
      ...item,
      quantity: item.quantity + 1
    };
    setCart(updatedCart);
  };

  // Handle cart item quantity decrement
  const handleDecrementQuantity = (index: number) => {
    const item = cart[index];
    
    if (item.quantity > 1) {
      const updatedCart = [...cart];
      updatedCart[index] = {
        ...item,
        quantity: item.quantity - 1
      };
      setCart(updatedCart);
    }
  };

  // Calculate subtotal
  const calculateSubtotal = () => {
    return cart.reduce((total, item) => total + (item.product.price * item.quantity), 0);
  };

  // Calculate discount
  const calculateDiscount = () => {
    const subtotal = calculateSubtotal();
    return selectedPromo ? calculatePromoDiscount(selectedPromo, subtotal) : 0;
  };

  // Calculate total
  const calculateTotal = () => {
    return calculateSubtotal() - calculateDiscount();
  };

  return (
    <div className="flex flex-col space-y-6">
      {/* Full-width header with staff info */}
      <div className="bg-white shadow-md rounded-xl p-4 border border-orange-100">
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <BackButton />
            <h1 className="text-2xl font-bold text-gray-800">Kasir</h1>
          </div>
          
          {/* Staff info with dropdown */}
          <div className="relative staff-dropdown-container">
            <button 
              onClick={toggleStaffDropdown}
              className="flex items-center space-x-3 bg-orange-50 hover:bg-orange-100 px-4 py-2 rounded-lg transition-colors border border-orange-200"
            >
              <div className="w-10 h-10 rounded-full bg-orange-200 flex items-center justify-center overflow-hidden">
                <FaUser className="text-orange-600" />
              </div>
              <div className="text-left">
                <p className="font-medium text-gray-800">{currentCashier.name}</p>
                <p className="text-xs text-gray-500">Shift {currentCashier.shift} ({currentCashier.shiftStart}-{currentCashier.shiftEnd})</p>
              </div>
              <FaChevronDown className={`text-gray-500 transition-transform duration-200 ${isStaffDropdownOpen ? 'rotate-180' : ''}`} />
            </button>
            
            {isStaffDropdownOpen && (
              <div className="absolute right-0 mt-2 w-72 bg-white rounded-xl shadow-lg border border-gray-200 z-50 overflow-hidden">
                <div className="p-4 border-b border-gray-100">
                  <div className="flex items-center space-x-3">
                    <div className="w-12 h-12 rounded-full bg-orange-100 flex items-center justify-center">
                      <FaUser className="text-orange-500" />
                    </div>
                    <div>
                      <p className="font-medium text-gray-800">{currentCashier.name}</p>
                      <p className="text-xs text-gray-500">{currentCashier.id}</p>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2 mt-3 text-sm">
                    <div className="bg-orange-50 p-2 rounded-lg">
                      <p className="text-gray-500">Shift</p>
                      <p className="font-medium text-gray-800">{currentCashier.shift}</p>
                    </div>
                    <div className="bg-orange-50 p-2 rounded-lg">
                      <p className="text-gray-500">Jam</p>
                      <p className="font-medium text-gray-800">{currentCashier.shiftStart}-{currentCashier.shiftEnd}</p>
                    </div>
                    <div className="bg-orange-50 p-2 rounded-lg">
                      <p className="text-gray-500">Transaksi</p>
                      <p className="font-medium text-gray-800">{currentCashier.totalTransactions}</p>
                    </div>
                    <div className="bg-orange-50 p-2 rounded-lg">
                      <p className="text-gray-500">Total</p>
                      <p className="font-medium text-gray-800">{formatRupiah(currentCashier.totalAmount)}</p>
                    </div>
                  </div>
                  
                  <div className="flex space-x-2 mt-4">
                    <button 
                      onClick={handleEndShiftClick}
                      className="flex-1 py-2 bg-orange-100 hover:bg-orange-200 text-orange-700 rounded-lg transition-colors flex items-center justify-center"
                    >
                      <FaClock className="mr-2" />
                      Tutup Shift
                    </button>
                    <button 
                      onClick={handleLogoutClick}
                      className="flex-1 py-2 bg-red-100 hover:bg-red-200 text-red-700 rounded-lg transition-colors flex items-center justify-center"
                    >
                      <FaSignOutAlt className="mr-2" />
                      Logout
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left column: Product search and grid */}
        <div className="lg:col-span-2 space-y-6">
          {/* Customer selection */}
          <div className="bg-white p-4 rounded-xl shadow-sm border border-orange-100 mb-4">
            <div className="flex justify-between items-center mb-2">
              <h3 className="font-medium text-gray-700">Customer</h3>
              <button 
                onClick={() => setIsCustomerModalOpenState(true)}
                className="text-xs text-orange-500 hover:text-orange-600"
              >
                Change
              </button>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 rounded-full bg-orange-100 flex items-center justify-center">
                <FaUser className="text-orange-500" />
              </div>
              <div>
                <p className="font-medium">{selectedCustomer.name}</p>
                <p className="text-xs text-gray-500">{selectedCustomer.phone}</p>
              </div>
            </div>
          </div>
          {/* Voucher/Promo section */}
          <div className="bg-white p-4 rounded-xl shadow-sm border border-orange-100 mb-4">
            <div className="flex justify-between items-center mb-2">
              <h3 className="font-medium text-gray-700">Voucher/Promo</h3>
              <button 
                onClick={() => setIsPromoModalOpenState(true)}
                className="text-xs text-orange-500 hover:text-orange-600"
              >
                Apply
              </button>
            </div>
          </div>
        </div>
        {/* Right column: Shopping cart */}
        <div className="lg:col-span-1 space-y-6">
          {/* Shopping cart */}
          <div className="bg-white rounded-xl shadow-md border border-orange-100 overflow-hidden flex flex-col h-[calc(100vh-150px)]">
            {/* Cart header */}
            <div className="bg-gradient-to-r from-orange-500 to-orange-600 p-4 text-white">
              <div className="flex justify-between items-center">
                <h2 className="text-lg font-bold flex items-center">
                  <FaShoppingCart className="mr-2" />
                  Keranjang Belanja
                </h2>
                <span className="bg-white text-orange-600 text-sm font-medium px-2 py-1 rounded-full">
                  {cart.length} Item
                </span>
              </div>
            </div>
            
            {/* Customer selection */}
            <div className="p-4 border-b border-orange-100 bg-orange-50">
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm text-gray-500">Pelanggan</p>
                  <p className="font-medium text-gray-800">{selectedCustomer.name}</p>
                </div>
                
                <button
                  onClick={() => setIsNewCustomerModalOpen(true)}
                  className="py-1.5 px-3 bg-white border border-orange-300 text-orange-600 rounded-lg hover:bg-orange-50 transition-colors flex items-center justify-center text-sm"
                >
                  <FaUserPlus className="mr-1.5" size={14} />
                  Pelanggan Baru
                </button>
              </div>
            </div>
            
            {/* Cart items */}
            <div className="flex-1 overflow-auto p-4 space-y-3 max-h-[calc(100vh-350px)] scrollbar-thin scrollbar-thumb-orange-200 scrollbar-track-orange-50">
              {cart.length === 0 ? (
                <div className="text-center py-10">
                  <div className="w-16 h-16 mx-auto bg-orange-50 rounded-full flex items-center justify-center mb-3">
                    <FaShoppingCart className="text-orange-300" size={24} />
                  </div>
                  <p className="text-gray-500">Keranjang belanja kosong</p>
                  <p className="text-sm text-gray-400 mt-1">Tambahkan produk ke keranjang</p>
                </div>
              ) : (
                cart.map((item, index) => (
                  <div key={index} className="bg-white p-3 rounded-xl mb-3 shadow-sm border border-orange-100 hover:shadow-md transition-all duration-300 relative overflow-hidden">
                    {/* Decorative elements */}
                    <div className="absolute -right-4 -top-4 w-8 h-8 bg-gradient-to-br from-orange-300 to-orange-100 rounded-full opacity-30"></div>
                    <div className="absolute -left-4 -bottom-4 w-6 h-6 bg-gradient-to-tr from-orange-300 to-orange-100 rounded-full opacity-30"></div>
                    
                    <div className="flex">
                      {/* Product image */}
                      <div className="relative w-16 h-16 rounded-lg overflow-hidden mr-3 border border-orange-100">
                        <Image
                          src={item.product.image}
                          alt={item.product.name}
                          fill
                          className="object-cover"
                          sizes="64px"
                        />
                      </div>
                      
                      {/* Product details */}
                      <div className="flex-1">
                        <h3 className="font-medium text-gray-800 mb-1 pr-6 truncate">{item.product.name}</h3>
                        <p className="text-orange-600 font-bold">{formatRupiah(item.product.price)}</p>
                        
                        {/* Quantity controls */}
                        <div className="flex justify-between items-center mt-2">
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={() => handleDecrementQuantity(index)}
                              className="w-7 h-7 rounded-full bg-orange-50 text-orange-600 flex items-center justify-center hover:bg-orange-100 transition-colors border border-orange-200"
                            >
                              <FaMinus size={10} />
                            </button>
                            <span className="w-8 text-center font-medium text-gray-800 bg-white border-x border-orange-200">
                              {item.quantity}
                            </span>
                            <button
                              onClick={() => handleIncrementQuantity(index)}
                              className="w-7 h-7 rounded-full bg-orange-50 text-orange-600 flex items-center justify-center hover:bg-orange-100 transition-colors border border-orange-200"
                            >
                              <FaPlus size={10} />
                            </button>
                          </div>
                          
                          <button
                            onClick={() => handleRemoveCartItem(index)}
                            className="text-red-500 hover:text-red-600 transition-colors"
                          >
                            <FaTrash size={14} />
                          </button>
                        </div>
                      </div>
                    </div>
                    
                    {/* Item subtotal */}
                    <div className="mt-2 pt-2 border-t border-dashed border-orange-100 flex justify-between items-center text-sm">
                      <span className="text-gray-500">Subtotal</span>
                      <span className="font-medium text-gray-800">{formatRupiah(item.product.price * item.quantity)}</span>
                    </div>
                  </div>
                ))
              )}
            </div>
            
            {/* Voucher/Promo section */}
            <div className="p-4 border-t border-orange-100 bg-orange-50">
              <button
                onClick={() => setIsPromoModalOpenState(true)}
                className="w-full py-2 px-3 bg-white border border-orange-300 text-orange-600 rounded-lg hover:bg-orange-50 transition-colors flex items-center justify-center"
              >
                <FaPercentage className="mr-2" />
                Tambah Voucher / Promo
              </button>
              
              {selectedPromo && (
                <div className="mt-3 p-3 bg-green-50 rounded-lg border border-green-200 flex justify-between items-center">
                  <div className="flex items-center">
                    <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-2">
                      <FaTag className="text-green-600" size={12} />
                    </div>
                    <div>
                      <p className="font-medium text-gray-800">{selectedPromo.name}</p>
                      <p className="text-xs text-gray-500">{selectedPromo.description}</p>
                    </div>
                  </div>
                  <button
                    onClick={() => setSelectedPromo(null)}
                    className="text-red-500 hover:text-red-600 transition-colors"
                  >
                    <FaTrash size={14} />
                  </button>
                </div>
              )}
            </div>
          </div>
          <div className="p-4 border-t border-orange-100">
            {/* Cart summary */}
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Subtotal</span>
                <span className="font-medium text-gray-800">{formatRupiah(calculateSubtotal())}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Diskon</span>
                <span className="font-medium text-green-600">- {formatRupiah(calculateDiscount())}</span>
              </div>
              <div className="flex justify-between items-center pt-2 border-t border-orange-100 mt-2">
                <span className="font-bold text-gray-800">Total</span>
                <span className="font-bold text-orange-600 text-lg">{formatRupiah(calculateTotal())}</span>
              </div>
            </div>
            
            {/* Payment button */}
            <button
              onClick={handlePayment}
              disabled={cart.length === 0}
              className={`w-full py-3 mt-4 rounded-lg text-white flex items-center justify-center text-lg font-bold shadow-md
                ${cart.length === 0 
                  ? 'bg-gray-300 cursor-not-allowed' 
                  : 'bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 transition-colors'}`}
            >
              <FaCreditCard className="mr-2" />
              Proses Pembayaran
            </button>
          </div>
        </div>
      </div>
      
      {/* Product search and grid */}
      <div className="bg-white p-4 rounded-xl shadow-sm border border-orange-100">
        {/* Search and filter bar */}
        <div className="flex space-x-2 mb-4">
          <div className="relative flex-1">
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Cari produk..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 rounded-lg border border-orange-200 focus:outline-none focus:ring-2 focus:ring-orange-300 focus:border-transparent"
            />
          </div>
          <button className="p-2 bg-orange-100 text-orange-600 rounded-lg hover:bg-orange-200 transition-colors">
            <FaFilter />
          </button>
          <button className="p-2 bg-orange-100 text-orange-600 rounded-lg hover:bg-orange-200 transition-colors">
            <FaBarcode />
          </button>
        </div>
        
        {/* Category filter */}
        <div className="flex space-x-2 overflow-x-auto pb-2 mb-4 scrollbar-thin scrollbar-thumb-orange-200 scrollbar-track-orange-50">
          {categories.map((category) => (
            <button
              key={category}
              onClick={() => setCategoryFilter(category === "Semua" ? null : category)}
              className={`px-3 py-1.5 rounded-full text-sm whitespace-nowrap transition-colors ${
                (category === "Semua" && categoryFilter === null) || category === categoryFilter
                  ? "bg-orange-500 text-white"
                  : "bg-orange-50 text-gray-700 hover:bg-orange-100"
              }`}
            >
              {category}
            </button>
          ))}
        </div>
        
        {/* Product grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mt-4 max-h-[calc(100vh-350px)] overflow-y-auto scrollbar-thin scrollbar-thumb-orange-200 scrollbar-track-orange-50">
          {filteredProducts.map((product) => (
            <ProductCard
              key={product.id}
              product={product}
              onAddToCart={() => handleAddToCart(product)}
              onViewDetail={() => handleViewProductDetail(product)}
            />
          ))}
        </div>
        
        {/* Pagination */}
        <div className="flex justify-center items-center mt-6 space-x-2">
          <button
            onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
            disabled={currentPage === 1}
            className="p-2 rounded-lg border border-orange-200 text-orange-600 disabled:text-gray-400 disabled:border-gray-200"
          >
            <FaChevronLeft />
          </button>
          <span className="px-4 py-2 rounded-lg bg-orange-50 text-gray-700">
            Page {currentPage} of {productTotalPage || 1}
          </span>
          <button
            onClick={() => setCurrentPage(prev => Math.min(prev + 1, productTotalPage || 1))}
            disabled={currentPage === (productTotalPage || 1)}
            className="p-2 rounded-lg border border-orange-200 text-orange-600 disabled:text-gray-400 disabled:border-gray-200"
          >
            <FaChevronRight />
          </button>
        </div>
      </div>
    </div>
    
    {/* New Customer Modal */}
    {isNewCustomerModalOpen && (
      <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl shadow-xl max-w-md w-full overflow-hidden animate-fade-in">
          <div className="bg-gradient-to-r from-orange-500 to-orange-600 p-4 text-white flex justify-between items-center">
            <h3 className="font-bold text-lg">Tambah Pelanggan Baru</h3>
            <button 
              onClick={() => setIsNewCustomerModalOpen(false)}
              className="text-white hover:text-orange-100"
            >
              <FaTimes />
            </button>
          </div>
          
          <div className="p-6 space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Nama Pelanggan</label>
              <input 
                type="text"
                value={newCustomer.name}
                onChange={(e) => setNewCustomer({...newCustomer, name: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                placeholder="Masukkan nama pelanggan"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Nomor Telepon</label>
              <input 
                type="tel"
                value={newCustomer.phone}
                onChange={(e) => setNewCustomer({...newCustomer, phone: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                placeholder="Masukkan nomor telepon"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Email (Opsional)</label>
              <input 
                type="email"
                value={newCustomer.email}
                onChange={(e) => setNewCustomer({...newCustomer, email: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                placeholder="Masukkan email"
              />
            </div>
            
            <div className="flex space-x-3 pt-4">
              <button
                onClick={() => setIsNewCustomerModalOpen(false)}
                className="flex-1 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Batal
              </button>
              <button
                onClick={handleNewCustomer}
                className="flex-1 py-2 bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-lg hover:from-orange-600 hover:to-orange-700"
              >
                Simpan
              </button>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
);

export default KasirPage;
